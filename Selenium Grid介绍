1.Selenium中包含三大组件：
   Selenium RC:模拟浏览器
   Selenium IDE:火狐浏览器里面的插件，可以录制在浏览器上的交互脚本
   Selenium Grid:实现分布式执行测试用例（浏览器兼容、操作系统Windows、Linux兼容）
2.UI自动化测试的价值：
  解决重复执行测试、解决多浏览器兼容性测试

3.Selenium Grid工作原理
  Selenium Grid的分布式结构就是由一个hub节点和若干个node代理节点组成。
  Hub用来管理各个代理节点的注册信息和状态信息，并且接受远程客户代码的请求调用，然后把请求的命令转发给代理节点来执行。
 
 重点：node节点中必须存在脚本代码所需环境（python selenium 浏览器及驱动）

4.Selenium Grid环境部署
 4.1 安装Selenium: pip install selenium  
 
 4.2 下载jar包
     下载地址：http://selenium-release.storage.googleapis.com/index.html
     选择和Selenium 相对应的版本，下载jar包。  pip show selenium
 
 4.3 启动hub
     启动命令：
       java -jar selenium-server-standalone-3.141.0.jar -role hub -maxSession 10 -port 4444
     参数分析：
        -role hub ：表示启动的是hub主节点
        -port ： 设置端口号，hub的默认端口是4444
        -maxSession ： 为最大会话请求，这个参数主要用于并发执行测试用例，默认是1，建议设置10及以上
     校验：
     浏览器打开：http://localhost:4444/，能成功访问表示hub启动成功
 
 4.4 启动node节点
    启动命令：
       java -jar selenium-server-standalone-3.141.0.jar -role node -port 5555 -
       hub http://192.168.31.71:4444/grid/register/ -maxSession 5 -browser browserName=firefox,seleniumProtocol=
       WebDriver,maxInstances=5,platform=WINDOWS,version=45.0.2
    参数解析：
    -role node ：表示启动的是node节点
    -port ： 指定node节点端口
    -hub http://192.168.31.71:4444/grid/register/ : 表示hub机注册地址【这个地址在启动hub时会在终端打印出来】
    -maxSession 5 ： node节点最大会话请求
    -browser browserName=firefox,seleniumProtocol=
       WebDriver,maxInstances=5,platform=WINDOWS,version=45.0.2 ：
      设置浏览器的参数，
        browserName ： 表示浏览器名字，如chrome，firefox，ie
        maxInstances ： 表示最大实例，可以理解为最多可运行的浏览器数，不能大于前面maxSession的值，否则可能会出错
        platform ： 表示操作系统，如WINDOWS、LINUX、MAC (注意：都是大写)
        version  ： 表示浏览器版本
    校验：
    浏览器打开：http://localhost:4444/grid/console,可以看到已经启动的node节点
    
   【工具延伸】
    1。安装Chrome浏览器驱动：https://www.cnblogs.com/Eeyhan/p/13033381.html
    2.Mac进入/usr/local： https://blog.csdn.net/u010545480/article/details/71425267
        Mac下/usr/local目录默认是对于Finder是隐藏，如果需要到/usr/local下去，打开Finder，然后使用command+shift+G，在弹出的目录中填写/usr/local就可以了。


二、自动化测试的流程
 1.抽取功能用例转化为自动化用例
 2.搭建本机自动化测试环境
 3.搭建项目目录结构
 4.编写测试脚本
 5.执行测试脚本
 6.生成测试报告
 7.持续集成

三、编写自动化测试用例的原则
 1.自动化测试用例一般只实现核心业务流程或者重复执行率较高的功能
 2.自动化测试用例的选择一般以"正向"逻辑的验证为主
 3.不是所有手工用例都可以使用自动化测试来执行
 4.尽量减少多个用例脚本之间的依赖
 5.自动化测试用例执行完毕后，一般需要回归原点

用例模版
 用例编号 模块 优先级 用例标题 预置条件 步骤描述 测试数据 预期结果 实际结果 是否自动化

项目目录结构搭建
base: 所有page页面基类，page页面公共方法目录
page: 页面对象目录
scripts: 测试脚本
image: 失败图片存储目录
report: 测试报告存储目录
data: 测试数据存储目录
log: 脚本运行日志存储目录
tools: 工具类存储目录

模块名编写：base.py
类名编写：大驼峰方式将模块名抄进来，有下划线去掉下划线
函数名编写：base+下划线+动词+[名词] （如base_input）


